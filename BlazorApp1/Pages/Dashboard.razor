@using ChessGame.Infrastructure.Infrastructure.Hubs
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.SignalR
@using WebAssemblyChessGame.UI.ServiceEndpoints

@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<h3>dashboard</h3>

@code {
    List<string> activeGamers = new();
    public void InitializeActiveGamers()
    {
        activeGamers = GameHub.Connections.Where(KeyValuePair => !String.IsNullOrEmpty(KeyValuePair.Value)).Select(notNulKvp => notNulKvp.Key).ToList();
    }
    
    private HubConnection? _hubConnection;
    private List<string> _activeGamers = new();
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder().
            WithUrl(
                $"{BasePaths.baseUrl}",
                option =>
                    {
                        option.Transports = HttpTransportType.WebSockets;

                    }).Build();

        await _hubConnection.StartAsync();
    }
    public async Task SendInviteAsync(string playerId)
    {
        await _hubConnection!.InvokeAsync("SendInvite");
    }
}
@if (activeGamers.Count == 0)
{
    <p>No players online</p>
}
else
{
    <ul>
        @foreach (var player in activeGamers)
        {
            <li>
                @player
                <button @onclick="async () => await SendInviteAsync(player)">Invite</button>
            </li>
        }
    </ul>
}
