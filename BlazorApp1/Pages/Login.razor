@page "/Login"
@using SharedResources.DTOs.IdentityDTOs.RequestDTOs
@using WebAssemblyChessGame.UI.ApiServices
@inject IdentityService identityService
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>
<link href="~/css/Login.css" rel="stylesheet" />

<div class="d-flex justify-content-center align-items-center min-vh-100">
    <div class="card login-card p-5 shadow-lg">
        <h2 class="text-center mb-4">Welcome Back</h2>
        <p class="text-center text-muted mb-4">Please log in to your account</p>

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @SuccessMessage
                <button type="button" class="btn-close" @onclick="() => SuccessMessage = null"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <b>Error:</b> @ErrorMessage
                <button type="button" class="btn-close" @onclick="() => ErrorMessage = null"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(IdentityErrorMessage))
        {
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                @IdentityErrorMessage
                <button type="button" class="btn-close" @onclick="() => IdentityErrorMessage = null"></button>
            </div>
        }

        <div class="form-floating mb-3">
            <input @bind="Email" type="email" class="form-control" id="email" placeholder="Email" />
            <label for="email">Email</label>
        </div>

        <div class="form-floating mb-4">
            <input @bind="Password" type="password" class="form-control" id="password" placeholder="Password" />
            <label for="password">Password</label>
        </div>

        <button @onclick="LoginAsync" class="btn btn-gradient w-100 py-2">Login</button>

        <div class="mt-3 text-center">
            <small>Don't have an account? <a href="/Registration">Register</a></small>
        </div>
    </div>
</div>

@code {
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string? IdentityErrorMessage { get; set; } = string.Empty;
    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }

    private async Task LoginAsync()
    {
        try
        {
            ErrorMessage = null;
            SuccessMessage = null;

            var loginDto = new LoginDTO
            {
                email = Email,
                password = Password
            };

            var result = await identityService.LoginUserAsync(loginDto,new List<KeyValuePair<string, string>>());

            if (result == null || !result.IsSuccess)
            {
                if (result.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    ErrorMessage = "Login failed. Please try again.";
                    return;
                }
                IdentityErrorMessage = string.Join(",",result.Errors);
                ErrorMessage = result?.message?.MessageOutput ?? "Login failed. Please try again.";
                return;
            }

            Navigation.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
